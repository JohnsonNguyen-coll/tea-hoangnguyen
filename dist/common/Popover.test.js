"use strict";
/*
 * MIT License
 *
 * Copyright (c) 2020 RÃ©mi Van Keisbelck
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Dim_1 = require("./Dim");
const Box_1 = require("./Box");
const Pos_1 = require("./Pos");
const Popover_1 = require("./Popover");
describe('popover 2 tests', () => {
    const viewport = Dim_1.dim(100);
    const place_ = (refBox) => (elem) => Popover_1.place(viewport, refBox, elem);
    describe('top left', () => {
        const doPlace = place_(Box_1.box(Pos_1.pos(10, 10), Dim_1.dim(10)));
        test('should align top right', () => {
            expect(doPlace(Dim_1.dim(50))).toEqual(Box_1.box(Pos_1.pos(20, 10), Dim_1.dim(50)));
        });
        test('should translate up if not enough space to align top right', () => {
            expect(doPlace(Dim_1.dim(50, 95))).toEqual(Box_1.box(Pos_1.pos(20, 5), Dim_1.dim(50, 95)));
        });
        test('should fit vertically if too high', () => {
            expect(doPlace(Dim_1.dim(50, 200))).toEqual(Box_1.box(Pos_1.pos(20, 0), Dim_1.dim(50, 100)));
        });
        test("should translate up and left if doesn't fit", () => {
            expect(doPlace(Dim_1.dim(85, 95))).toEqual(Box_1.box(Pos_1.pos(15, 5), Dim_1.dim(85, 95)));
        });
    });
    describe('bottom left', () => {
        const doPlace = place_(Box_1.box(Pos_1.pos(10, 80), Dim_1.dim(10)));
        test('should align bottom right', () => {
            expect(doPlace(Dim_1.dim(50))).toEqual(Box_1.box(Pos_1.pos(20, 40), Dim_1.dim(50)));
        });
        test('shoult fit vertically if too high', () => {
            expect(doPlace(Dim_1.dim(50, 200))).toEqual(Box_1.box(Pos_1.pos(20, 0), Dim_1.dim(50, 100)));
        });
    });
    describe('top right', () => {
        const doPlace = place_(Box_1.box(Pos_1.pos(80, 10), Dim_1.dim(10)));
        test('should align top left', () => {
            expect(doPlace(Dim_1.dim(50))).toEqual(Box_1.box(Pos_1.pos(30, 10), Dim_1.dim(50)));
        });
        test('should translate up if not enough space to aligh top left', () => {
            expect(doPlace(Dim_1.dim(50, 95))).toEqual(Box_1.box(Pos_1.pos(30, 5), Dim_1.dim(50, 95)));
        });
        test('should fit vertically if too high', () => {
            expect(doPlace(Dim_1.dim(50, 200))).toEqual(Box_1.box(Pos_1.pos(30, 0), Dim_1.dim(50, 100)));
        });
    });
    describe('bottom right', () => {
        const doPlace = place_(Box_1.box(Pos_1.pos(80, 80), Dim_1.dim(10)));
        test('should align bottom left', () => {
            expect(doPlace(Dim_1.dim(50))).toEqual(Box_1.box(Pos_1.pos(30, 40), Dim_1.dim(50)));
        });
        test('should fit vertically if too high', () => {
            expect(doPlace(Dim_1.dim(50, 200))).toEqual(Box_1.box(Pos_1.pos(30, 0), Dim_1.dim(50, 100)));
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUG9wb3Zlci50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbW1vbi9Qb3BvdmVyLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXVCRzs7QUFFSCwrQkFBaUM7QUFDakMsK0JBQWlDO0FBQ2pDLCtCQUE0QjtBQUM1Qix1Q0FBa0M7QUFFbEMsUUFBUSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtJQUMvQixNQUFNLFFBQVEsR0FBUSxTQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFL0IsTUFBTSxNQUFNLEdBQUcsQ0FBQyxNQUFXLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBUyxFQUFFLEVBQUUsQ0FBQyxlQUFLLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUU3RSxRQUFRLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRTtRQUN4QixNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsU0FBRyxDQUFDLFNBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsU0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVsRCxJQUFJLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO1lBQ2xDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBRyxDQUFDLFNBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsU0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5RCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyw0REFBNEQsRUFBRSxHQUFHLEVBQUU7WUFDdEUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBRyxDQUFDLFNBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsU0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckUsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsbUNBQW1DLEVBQUUsR0FBRyxFQUFFO1lBQzdDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQUcsQ0FBQyxTQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLFNBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLDZDQUE2QyxFQUFFLEdBQUcsRUFBRTtZQUN2RCxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFHLENBQUMsU0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxTQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyRSxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGFBQWEsRUFBRSxHQUFHLEVBQUU7UUFDM0IsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLFNBQUcsQ0FBQyxTQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLFNBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFbEQsSUFBSSxDQUFDLDJCQUEyQixFQUFFLEdBQUcsRUFBRTtZQUNyQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQUcsQ0FBQyxTQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLFNBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUQsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsbUNBQW1DLEVBQUUsR0FBRyxFQUFFO1lBQzdDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQUcsQ0FBQyxTQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLFNBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRTtRQUN6QixNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsU0FBRyxDQUFDLFNBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsU0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVsRCxJQUFJLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO1lBQ2pDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBRyxDQUFDLFNBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsU0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5RCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQywyREFBMkQsRUFBRSxHQUFHLEVBQUU7WUFDckUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBRyxDQUFDLFNBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsU0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckUsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsbUNBQW1DLEVBQUUsR0FBRyxFQUFFO1lBQzdDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQUcsQ0FBQyxTQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLFNBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRTtRQUM1QixNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsU0FBRyxDQUFDLFNBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsU0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVsRCxJQUFJLENBQUMsMEJBQTBCLEVBQUUsR0FBRyxFQUFFO1lBQ3BDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBRyxDQUFDLFNBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsU0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5RCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxtQ0FBbUMsRUFBRSxHQUFHLEVBQUU7WUFDN0MsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBRyxDQUFDLFNBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsU0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkUsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIE1JVCBMaWNlbnNlXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDIwIFLDqW1pIFZhbiBLZWlzYmVsY2tcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAqIFNPRlRXQVJFLlxuICpcbiAqL1xuXG5pbXBvcnQgeyBkaW0sIERpbSB9IGZyb20gJy4vRGltJztcbmltcG9ydCB7IEJveCwgYm94IH0gZnJvbSAnLi9Cb3gnO1xuaW1wb3J0IHsgcG9zIH0gZnJvbSAnLi9Qb3MnO1xuaW1wb3J0IHsgcGxhY2UgfSBmcm9tICcuL1BvcG92ZXInO1xuXG5kZXNjcmliZSgncG9wb3ZlciAyIHRlc3RzJywgKCkgPT4ge1xuICBjb25zdCB2aWV3cG9ydDogRGltID0gZGltKDEwMCk7XG5cbiAgY29uc3QgcGxhY2VfID0gKHJlZkJveDogQm94KSA9PiAoZWxlbTogRGltKSA9PiBwbGFjZSh2aWV3cG9ydCwgcmVmQm94LCBlbGVtKTtcblxuICBkZXNjcmliZSgndG9wIGxlZnQnLCAoKSA9PiB7XG4gICAgY29uc3QgZG9QbGFjZSA9IHBsYWNlXyhib3gocG9zKDEwLCAxMCksIGRpbSgxMCkpKTtcblxuICAgIHRlc3QoJ3Nob3VsZCBhbGlnbiB0b3AgcmlnaHQnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoZG9QbGFjZShkaW0oNTApKSkudG9FcXVhbChib3gocG9zKDIwLCAxMCksIGRpbSg1MCkpKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCB0cmFuc2xhdGUgdXAgaWYgbm90IGVub3VnaCBzcGFjZSB0byBhbGlnbiB0b3AgcmlnaHQnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoZG9QbGFjZShkaW0oNTAsIDk1KSkpLnRvRXF1YWwoYm94KHBvcygyMCwgNSksIGRpbSg1MCwgOTUpKSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgZml0IHZlcnRpY2FsbHkgaWYgdG9vIGhpZ2gnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoZG9QbGFjZShkaW0oNTAsIDIwMCkpKS50b0VxdWFsKGJveChwb3MoMjAsIDApLCBkaW0oNTAsIDEwMCkpKTtcbiAgICB9KTtcblxuICAgIHRlc3QoXCJzaG91bGQgdHJhbnNsYXRlIHVwIGFuZCBsZWZ0IGlmIGRvZXNuJ3QgZml0XCIsICgpID0+IHtcbiAgICAgIGV4cGVjdChkb1BsYWNlKGRpbSg4NSwgOTUpKSkudG9FcXVhbChib3gocG9zKDE1LCA1KSwgZGltKDg1LCA5NSkpKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2JvdHRvbSBsZWZ0JywgKCkgPT4ge1xuICAgIGNvbnN0IGRvUGxhY2UgPSBwbGFjZV8oYm94KHBvcygxMCwgODApLCBkaW0oMTApKSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgYWxpZ24gYm90dG9tIHJpZ2h0JywgKCkgPT4ge1xuICAgICAgZXhwZWN0KGRvUGxhY2UoZGltKDUwKSkpLnRvRXF1YWwoYm94KHBvcygyMCwgNDApLCBkaW0oNTApKSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bHQgZml0IHZlcnRpY2FsbHkgaWYgdG9vIGhpZ2gnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoZG9QbGFjZShkaW0oNTAsIDIwMCkpKS50b0VxdWFsKGJveChwb3MoMjAsIDApLCBkaW0oNTAsIDEwMCkpKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3RvcCByaWdodCcsICgpID0+IHtcbiAgICBjb25zdCBkb1BsYWNlID0gcGxhY2VfKGJveChwb3MoODAsIDEwKSwgZGltKDEwKSkpO1xuXG4gICAgdGVzdCgnc2hvdWxkIGFsaWduIHRvcCBsZWZ0JywgKCkgPT4ge1xuICAgICAgZXhwZWN0KGRvUGxhY2UoZGltKDUwKSkpLnRvRXF1YWwoYm94KHBvcygzMCwgMTApLCBkaW0oNTApKSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgdHJhbnNsYXRlIHVwIGlmIG5vdCBlbm91Z2ggc3BhY2UgdG8gYWxpZ2ggdG9wIGxlZnQnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoZG9QbGFjZShkaW0oNTAsIDk1KSkpLnRvRXF1YWwoYm94KHBvcygzMCwgNSksIGRpbSg1MCwgOTUpKSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgZml0IHZlcnRpY2FsbHkgaWYgdG9vIGhpZ2gnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoZG9QbGFjZShkaW0oNTAsIDIwMCkpKS50b0VxdWFsKGJveChwb3MoMzAsIDApLCBkaW0oNTAsIDEwMCkpKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2JvdHRvbSByaWdodCcsICgpID0+IHtcbiAgICBjb25zdCBkb1BsYWNlID0gcGxhY2VfKGJveChwb3MoODAsIDgwKSwgZGltKDEwKSkpO1xuXG4gICAgdGVzdCgnc2hvdWxkIGFsaWduIGJvdHRvbSBsZWZ0JywgKCkgPT4ge1xuICAgICAgZXhwZWN0KGRvUGxhY2UoZGltKDUwKSkpLnRvRXF1YWwoYm94KHBvcygzMCwgNDApLCBkaW0oNTApKSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgZml0IHZlcnRpY2FsbHkgaWYgdG9vIGhpZ2gnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoZG9QbGFjZShkaW0oNTAsIDIwMCkpKS50b0VxdWFsKGJveChwb3MoMzAsIDApLCBkaW0oNTAsIDEwMCkpKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==