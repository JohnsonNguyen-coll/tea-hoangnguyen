"use strict";
/*
 * MIT License
 *
 * Copyright (c) 2020 RÃ©mi Van Keisbelck
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.subscriptions = exports.update = exports.open = void 0;
const Msg_1 = require("./Msg");
const react_tea_cup_1 = require("react-tea-cup");
const Model_1 = require("./Model");
const Menu_1 = require("./Menu");
const common_1 = require("../common");
function open(menu, refBox, selectFirst = false) {
    return [
        Model_1.initialModel(selectFirst ? menu.selectFirstItem() : menu.deselectAll(), refBox),
        react_tea_cup_1.Cmd.batch([
            react_tea_cup_1.Task.perform(getWindowDimensions, (d) => Msg_1.gotWindowDimensions(d)),
            react_tea_cup_1.Task.perform(react_tea_cup_1.uuid(), (u) => Msg_1.gotUuid(u)),
        ]),
    ];
}
exports.open = open;
function postOpen(model) {
    if (model.uuid.type === 'Nothing') {
        return react_tea_cup_1.noCmd(model);
    }
    if (model.windowSize.type === 'Nothing') {
        return react_tea_cup_1.noCmd(model);
    }
    const cmd = react_tea_cup_1.Task.attempt(Menu_1.menuTask(model.uuid.value).map((e) => common_1.Box.fromDomRect(e.getBoundingClientRect())), (x) => Msg_1.gotMenuBox(x));
    return [model, cmd];
}
function withOut(mac, outMsg = react_tea_cup_1.nothing) {
    return [mac[0], mac[1], outMsg];
}
function update(msg, model) {
    switch (msg.tag) {
        case 'got-window-dimensions': {
            return withOut(postOpen(Object.assign(Object.assign({}, model), { windowSize: react_tea_cup_1.just(msg.d) })));
        }
        case 'got-uuid': {
            return withOut(postOpen(Object.assign(Object.assign({}, model), { uuid: react_tea_cup_1.just(msg.uuid) })));
        }
        case 'got-menu-box': {
            if (model.state.tag === 'placing') {
                const state = model.state;
                return withOut(react_tea_cup_1.noCmd(model.windowSize
                    .map((windowSize) => {
                    const newModel = msg.r.match((menuBox) => (Object.assign(Object.assign({}, model), { state: {
                            tag: 'open',
                            box: common_1.place(windowSize, state.refBox, menuBox.d),
                        } })), (err) => (Object.assign(Object.assign({}, model), { error: react_tea_cup_1.just(err) })));
                    return newModel;
                })
                    .withDefault(model)));
            }
            return withOut(react_tea_cup_1.noCmd(model));
        }
        case 'key-down': {
            switch (msg.key) {
                case 'Escape': {
                    return withOut(collapseLastSubMenu(Model_1.keyboardNavigated(model)), model.child.isNothing() ? react_tea_cup_1.just({ tag: 'request-close' }) : react_tea_cup_1.nothing);
                }
                case 'ArrowDown':
                case 'ArrowUp': {
                    return mapLastMenu(Model_1.keyboardNavigated(model), (lastModel) => {
                        return withOut(react_tea_cup_1.noCmd(Object.assign(Object.assign({}, lastModel), { menu: lastModel.menu.moveSelection(msg.key === 'ArrowDown') })));
                    });
                }
                case 'ArrowLeft':
                    return withOut(collapseLastSubMenu(Model_1.keyboardNavigated(model)));
                case 'ArrowRight':
                    return expandLastSubMenu(Model_1.keyboardNavigated(model));
                case 'Enter':
                case ' ': {
                    return toggleOrSelectItem(model);
                }
                default:
                    return withOut(react_tea_cup_1.noCmd(model));
            }
        }
        case 'mouse-move': {
            if (model.menu.isSelected(msg.item)) {
                return withOut(react_tea_cup_1.noCmd(model));
            }
            const newModel = Object.assign(Object.assign({}, model), { subMenuCounter: model.subMenuCounter + 1 });
            if (model.navigatedWithKeyboard) {
                return withOut(react_tea_cup_1.noCmd(Model_1.keyboardNavigated(newModel, false)));
            }
            if (model.uuid.type === 'Nothing') {
                return withOut(react_tea_cup_1.noCmd(newModel));
            }
            const menu = model.menu.selectItem(msg.item);
            const uuid = model.uuid.value;
            return withOut(openSubMenu(Object.assign(Object.assign({}, newModel), { menu, child: react_tea_cup_1.nothing }), uuid, msg.item, msg.itemIndex, false));
        }
        case 'mouse-leave': {
            return withOut(react_tea_cup_1.noCmd(model.child.isJust()
                ? model
                : Object.assign(Object.assign({}, model), { menu: model.menu.deselectAll() })));
        }
        case 'got-item-box': {
            if (msg.subMenuCounter !== model.subMenuCounter) {
                return withOut(react_tea_cup_1.noCmd(model));
            }
            return withOut(msg.r.match((itemBox) => {
                const newModel = Object.assign(Object.assign({}, model), { menu: model.menu.selectItem(msg.item) });
                return msg.item.subMenu
                    .map((subMenu) => {
                    // we have a sub menu so we need
                    // to open a new Menu !
                    const mac = open(subMenu, itemBox, msg.selectFirst);
                    const newModel2 = Object.assign(Object.assign({}, newModel), { child: react_tea_cup_1.just(mac[0]) });
                    return react_tea_cup_1.Tuple.t2n(newModel2, mac[1].map(Msg_1.childMsg));
                })
                    .withDefaultSupply(() => {
                    // close any existing child !
                    return newModel.child
                        .map(() => react_tea_cup_1.noCmd(Object.assign(Object.assign({}, model), { child: react_tea_cup_1.nothing })))
                        .withDefaultSupply(() => react_tea_cup_1.noCmd(model));
                });
            }, (err) => react_tea_cup_1.noCmd(Object.assign(Object.assign({}, model), { error: react_tea_cup_1.just(err) }))));
        }
        case 'child-msg': {
            return model.child
                .map((child) => {
                const mco = update(msg.m, child);
                const newModel = Object.assign(Object.assign({}, model), { child: react_tea_cup_1.just(mco[0]) });
                return withOut(react_tea_cup_1.Tuple.t2n(newModel, mco[1].map(Msg_1.childMsg)), mco[2]);
            })
                .withDefaultSupply(() => withOut(react_tea_cup_1.noCmd(model)));
        }
        case 'item-clicked': {
            return withOut(react_tea_cup_1.noCmd(model), outItemSelected(msg.item));
        }
        case 'doc-mouse-down': {
            return withOut(react_tea_cup_1.noCmd(model), react_tea_cup_1.just({ tag: 'request-close' }));
        }
        case 'noop': {
            return withOut(react_tea_cup_1.noCmd(model));
        }
    }
}
exports.update = update;
function outItemSelected(item) {
    return react_tea_cup_1.just({ tag: 'item-selected', data: item.userData });
}
function openSubMenu(model, menuId, item, itemIndex, selectFirst) {
    if (item.subMenu.isNothing()) {
        return react_tea_cup_1.noCmd(model);
    }
    const subMenuCounter = model.subMenuCounter + 1;
    return react_tea_cup_1.Tuple.t2n(Object.assign(Object.assign({}, model), { subMenuCounter }), react_tea_cup_1.Task.attempt(Menu_1.menuItemTask(menuId, itemIndex).map((e) => {
        return common_1.Box.fromDomRect(e.getBoundingClientRect());
    }), (r) => Msg_1.gotItemBox(item, r, subMenuCounter, selectFirst)));
}
const windowEvents = new react_tea_cup_1.WindowEvents();
const documentEvents = new react_tea_cup_1.DocumentEvents();
function subscriptions(model) {
    return react_tea_cup_1.Sub.batch([
        windowEvents.on('resize', () => Msg_1.gotWindowDimensions(common_1.dim(window.innerWidth, window.innerHeight))),
        documentEvents.on('mousedown', (evt) => {
            if (evt.button === 2) {
                return Msg_1.noop();
            }
            let t = evt.target;
            while (t) {
                // move up and try to find if we are inside a tea-pop Menu !
                if (t.classList.contains('tm')) {
                    return Msg_1.noop();
                }
                t = t.parentElement;
            }
            return Msg_1.docMouseDown();
        }),
        model.state.tag === 'open'
            ? documentEvents.on('keydown', (e) => Msg_1.gotKeyDown(e.key))
            : react_tea_cup_1.Sub.none(),
    ]);
}
exports.subscriptions = subscriptions;
const getWindowDimensions = react_tea_cup_1.Task.succeedLazy(() => common_1.dim(window.innerWidth, window.innerHeight));
function mapLastMenu(model, f) {
    switch (model.child.type) {
        case 'Nothing': {
            // I'm the last model !
            return f(model);
        }
        case 'Just': {
            const mac = mapLastMenu(model.child.value, f);
            return [Object.assign(Object.assign({}, model), { child: react_tea_cup_1.just(mac[0]) }), mac[1].map(Msg_1.childMsg), mac[2]];
        }
    }
}
function collapseLastSubMenu(model) {
    switch (model.child.type) {
        case 'Nothing':
            return react_tea_cup_1.noCmd(model);
        case 'Just': {
            // I have a child : close it if he has no child !
            const child = model.child.value;
            if (child.child.isJust()) {
                return react_tea_cup_1.Tuple.fromNative(collapseLastSubMenu(child))
                    .mapFirst((c) => (Object.assign(Object.assign({}, model), { child: react_tea_cup_1.just(c) })))
                    .mapSecond((cmd) => cmd.map(Msg_1.childMsg))
                    .toNative();
            }
            else {
                return react_tea_cup_1.noCmd(Object.assign(Object.assign({}, model), { child: react_tea_cup_1.nothing }));
            }
        }
    }
}
function expandLastSubMenu(model) {
    return mapLastMenu(model, (lastModel) => {
        return lastModel.menu.selectedItem
            .map((selectedItem) => {
            return selectedItem.subMenu
                .map(() => {
                if (lastModel.uuid.type === 'Nothing') {
                    return withOut(react_tea_cup_1.noCmd(lastModel));
                }
                const uuid = lastModel.uuid.value;
                const mac = lastModel.menu
                    .indexOfItem(selectedItem)
                    .map((itemIndex) => {
                    return openSubMenu(lastModel, uuid, selectedItem, itemIndex, true);
                })
                    .withDefaultSupply(() => react_tea_cup_1.noCmd(lastModel));
                return withOut(mac);
            })
                .withDefaultSupply(() => {
                return withOut(react_tea_cup_1.noCmd(lastModel));
            });
        })
            .withDefaultSupply(() => {
            return withOut(react_tea_cup_1.noCmd(lastModel));
        });
    });
}
function toggleOrSelectItem(model) {
    return mapLastMenu(model, (lastModel) => {
        return lastModel.menu.selectedItem
            .map((selectedItem) => {
            if (lastModel.uuid.type === 'Nothing') {
                return withOut(react_tea_cup_1.noCmd(lastModel));
            }
            const uuid = lastModel.uuid.value;
            // do we have a sub-menu ?
            return selectedItem.subMenu
                .map(() => {
                // we have a sub-menu, expand it
                const mac = lastModel.menu
                    .indexOfItem(selectedItem)
                    .map((itemIndex) => openSubMenu(lastModel, uuid, selectedItem, itemIndex, true))
                    .withDefaultSupply(() => react_tea_cup_1.noCmd(lastModel));
                return withOut(mac);
            })
                .withDefaultSupply(() => {
                // no sub-menu, select the item
                return withOut(react_tea_cup_1.noCmd(lastModel), outItemSelected(selectedItem));
            });
        })
            .withDefaultSupply(() => withOut(react_tea_cup_1.noCmd(lastModel)));
    });
}
//# sourceMappingURL=data:application/json;base64,