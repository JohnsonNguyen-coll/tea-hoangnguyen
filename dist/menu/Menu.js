"use strict";
/*
 * MIT License
 *
 * Copyright (c) 2020 RÃ©mi Van Keisbelck
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.menuItemTask = exports.menuTask = exports.menuItemId = exports.menuId = exports.separator = exports.item = exports.menu = exports.Menu = void 0;
const react_tea_cup_1 = require("react-tea-cup");
class Menu {
    constructor(elements) {
        this.elements = elements;
    }
    selectFirstItem() {
        return new Menu(this.elements.selectIndex(0));
    }
    selectItem(item) {
        return new Menu(this.elements.select((e) => e === item));
    }
    deselectAll() {
        return new Menu(react_tea_cup_1.ListWithSelection.fromArray(this.elements.toArray()));
    }
    get elems() {
        return this.elements.toArray();
    }
    get selectedItem() {
        const selected = this.elements.getSelected();
        if (selected.type === 'Just' && selected.value.tag === 'item') {
            return react_tea_cup_1.just(selected.value);
        }
        return react_tea_cup_1.nothing;
    }
    isSelected(item) {
        return this.elements.isSelected(item);
    }
    findNextItemIndex(start) {
        const elems = this.elems;
        const s = start === elems.length - 1 ? 0 : start + 1;
        for (let i = s; i < elems.length; i++) {
            if (elems[i].tag === 'item') {
                return react_tea_cup_1.just(i);
            }
        }
        return react_tea_cup_1.nothing;
    }
    findPreviousItemIndex(start) {
        const elems = this.elems;
        const s = start === 0 ? elems.length - 1 : start - 1;
        for (let i = s; i >= 0; i--) {
            if (elems[i].tag === 'item') {
                return react_tea_cup_1.just(i);
            }
        }
        return react_tea_cup_1.nothing;
    }
    moveSelection(down) {
        return this.elements
            .getSelectedIndex()
            .map((selectedIndex) => {
            const mbNextIndex = down
                ? this.findNextItemIndex(selectedIndex)
                : this.findPreviousItemIndex(selectedIndex);
            return mbNextIndex
                .map((nextIndex) => new Menu(this.elements.selectIndex(nextIndex)))
                .withDefault(this);
        })
            .withDefaultSupply(() => {
            return new Menu(this.elements.selectIndex(down ? 0 : this.elements.length() - 1));
        });
    }
    indexOfItem(item) {
        const i = this.elements.toArray().indexOf(item);
        if (i === -1) {
            return react_tea_cup_1.nothing;
        }
        return react_tea_cup_1.just(i);
    }
}
exports.Menu = Menu;
function menu(items) {
    return new Menu(react_tea_cup_1.ListWithSelection.fromArray(items));
}
exports.menu = menu;
function item(userData, subMenu) {
    return {
        tag: 'item',
        userData,
        subMenu: react_tea_cup_1.maybeOf(subMenu),
    };
}
exports.item = item;
exports.separator = {
    tag: 'separator',
};
function menuId(uuid) {
    return `tm-${btoa(uuid)}`;
}
exports.menuId = menuId;
function menuItemId(menuId, itemIndex) {
    return `tm-item-${menuId}-${itemIndex}`;
}
exports.menuItemId = menuItemId;
function menuTask(uuid) {
    return byId(menuId(uuid));
}
exports.menuTask = menuTask;
function menuItemTask(menuId, itemIndex) {
    return byId(menuItemId(menuId, itemIndex));
}
exports.menuItemTask = menuItemTask;
function byId(id) {
    return react_tea_cup_1.Task.fromLambda(() => {
        const e = document.getElementById(id);
        if (e === null) {
            throw new Error('element not found with id:' + id);
        }
        return e;
    });
}
//# sourceMappingURL=data:application/json;base64,